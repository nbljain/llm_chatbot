name: SQL Chatbot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: employee_llm_rag_chatbot
  IMAGE_TAG: latest
  PYTHON_VERSION: '3.11.5'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      
      - name: Run Black for Code Formatting
        run: poetry run black . --line-length 79

 

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Run unit tests
        run: poetry run pytest tests/unit -v --cov=src --cov-report=xml

      - name: Upload code coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Run integration tests
        run: poetry run pytest tests/integration -v --cov=src --cov-report=xml

      - name: Upload code coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integrationtests

  build-docker:
    name: Build & Push Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker image to GHCR
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging (EC2)
    runs-on: ubuntu-latest
    needs: [build-docker]
    environment: staging
    permissions: 
      id-token: write
      contents: read 

    env:
      CONTAINER_APP_NAME: aca-llm-chatbot
      RESOURCE_GROUP: azure-ml-rsg
      ACR_NAME: azurecrnew
  
    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2
  
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ACALLMCHATBOT_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.ACALLMCHATBOT_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.ACALLMCHATBOT_AZURE_SUBSCRIPTION_ID }}
  
      - name: Azure ACR Login
        run: az acr login --name ${{ env.ACR_NAME }}
  
      - name: Build and push container image to registry
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ github.workspace }}
          dockerfilePath: ./Dockerfile          # adjust path if Dockerfile is elsewhere
          registryUrl: ${{ env.ACR_NAME }}.azurecr.io
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          imageToBuild: ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_APP_NAME }}:${{ github.sha }}
