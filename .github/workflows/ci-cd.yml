name: SQL Chatbot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: employee_llm_rag_chatbot
  IMAGE_TAG: latest
  PYTHON_VERSION: '3.11.5'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      
      - name: Run Black for Code Formatting
        run: poetry run black . --line-length 79

 

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Run unit tests
        run: poetry run pytest tests/unit -v --cov=src --cov-report=xml

      - name: Upload code coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Run integration tests
        run: poetry run pytest tests/integration -v --cov=src --cov-report=xml

      - name: Upload code coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integrationtests

  build-docker:
    name: Build & Push Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker image to GHCR
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.24'

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Create OpenAI API Key secret
        run: |
          # Convert OPENAI_API_KEY to base64
          echo "${{ secrets.OPENAI_API_KEY }}" | base64 > openai_api_key_base64.txt
          export OPENAI_API_KEY_BASE64=$(cat openai_api_key_base64.txt)
          
          # Replace variables in Kubernetes manifest
          export ACR_REGISTRY=${{ secrets.ACR_LOGIN_SERVER }}
          export DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          envsubst < k8s/staging/deployment.yaml > deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f deployment.yaml
          kubectl apply -f k8s/staging/service.yaml
          kubectl apply -f k8s/staging/ingress.yaml

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/sql-chatbot -n default

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.24'

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Create OpenAI API Key secret
        run: |
          # Convert OPENAI_API_KEY to base64
          echo "${{ secrets.OPENAI_API_KEY }}" | base64 > openai_api_key_base64.txt
          export OPENAI_API_KEY_BASE64=$(cat openai_api_key_base64.txt)
          
          # Replace variables in Kubernetes manifest
          export ACR_REGISTRY=${{ secrets.ACR_LOGIN_SERVER }}
          export DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          envsubst < k8s/production/deployment.yaml > deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f deployment.yaml
          kubectl apply -f k8s/production/service.yaml
          kubectl apply -f k8s/production/ingress.yaml

      - name: Wait for deployment to be ready
        run: |
          kubectl rollout status deployment/sql-chatbot -n default